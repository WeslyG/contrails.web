// @flow
/* eslint-disable */

declare module 'moment' {
    declare type Units =
        'years' |
        'y' |
        'quarters' |
        'Q' |
        'months' |
        'M' |
        'weeks' |
        'w' |
        'days' |
        'd' |
        'hours' |
        'h' |
        'minutes' |
        'm' |
        'seconds' |
        's' |
        'milliseconds' |
        'ms';

    declare type Unit =
        'year' |
        'month' |
        'quarter' |
        'week' |
        'isoWeek' |
        'day' |
        'date' |
        'hour' |
        'minute' |
        'second';

    declare export interface Moment {
        toDate(): Date;
        locale(localeId: string): Moment;
        isValid(): boolean;
        isBefore(moment: Moment): boolean;
        isAfter(moment: Moment): boolean;
        isSame(moment: Moment | Date | string | number): boolean;
        isSame(value: Moment | Date | string | number, units: Unit): boolean;
        isSameOrBefore(moment: Moment): boolean;
        utcOffset(offsetValue?: number | string): Moment;
        utc(): Moment;
        add(value: number, units: Units): Moment;
        subtract(value: number, units: Units): Moment;
        diff(value: Moment, units: Units): number;
        format(format?: string): string;
        toISOString(): string;
        startOf(unit: Unit): Moment;

        hour(value: number): Moment;
        hours(value: number): Moment;
        minute(value: number): Moment;
        minutes(value: number): Moment;
        year(value: number): Moment;
        year(): number;
        valueOf(): number;
    }

    declare export default class MomentStatic  {
        static (date?: ?string | ?Date | ?number, format?: ?string, ...rest: void[]): Moment;
        static utc(date?: ?string | ?Date, format?: ?string, ...rest: void[]): Moment;
    }
}
