// @flow
declare module 'lchai' {
    declare interface IExpectToHave<T> {
        length(value: number): void;
        string(value: string): void;
        property(path: string): void;
        deep: IExpectToHaveDeep<T>;
    }

    declare interface IExpectToHaveDeep<T> {
        property(path: string, value: any): void;
    }

    declare interface IExpectTo<T> {
        eql(expectedValue: T): void;
        equal(expectedValue: T): void;
        contains(expectedValue: string): void;
        equals(expectedValue: T): void;
        match(regex: RegExp): void;
        throw(expectedValue: T): void;
        deep: IExpectToDeep<T>;
        have: IExpectToHave<T>;
        be: IExpectToBe<T>;
    }

    declare interface IExpectToDeep<T> {
        equal(expectedValue: T): void;
    }

    declare interface IExpectToBe<T> {
        eql(expectedValue: T): void;
        equal(expectedValue: T): void;
        equals(expectedValue: T): void;
        empty(): void;
        null(): void;
        false(): void;
        true(): void;
        undefined(): void;
    }

    declare interface IExpect<T> {
        to: IExpectTo<T>;
        not: IExpect<T>;
    }

    declare function expect<T>(value: T): IExpect<T>;
}
