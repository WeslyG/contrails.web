declare module 'enzyme' {
    declare export class ShallowWrapper {
        find(selector: string): ShallowWrapper;
        find(props: { [prop: string]: mixed; }): ShallowWrapper;
        simulate(eventName: string, event: mixed, ...args: mixed[]): void;
        props(): Object;
        setProps(nextProps: Object): void;
        state(): Object;
        html(): string;
        text(): string;
        length: number;
        at(index: number): ShallowWrapper;
        children(): ShallowWrapper;
        update(): void;
    }

    declare type ShallowOptions = {
        context?: mixed;
    };

    declare export function shallow(elements: React.Element<*>, options?: ShallowOptions): ShallowWrapper;

    declare export class ReactWrapper<TProps> {
        find(selector: string): ReactWrapper<any>;
        setProps(props: $Shape<TProps>): void;
        simulate(eventName: string, event: mixed, ...args: mixed[]): void;
        unmount(): void;
        props(): TProps;
    }

    declare export function mount<T>(elements: React.Element<T>): ReactWrapper<T>;
}
