// @flow
/* eslint-disable */
import React, { PropTypes } from 'react';

declare type FunctionComponent<P> = (props: P) => ?React$Element<any>;
declare type ClassComponent<D, P, S> = Class<React$Component<D, P, S>>;

export type WithApiWrapper<TApiProps> = <P, S>(Comp: ClassComponent<void, P, S> | FunctionComponent<P>) => ClassComponent<void, $Diff<P, TApiProps>, S>;

declare export var createWithApiWrapper: <T: {}>(z: string, u: ?T) => WithApiWrapper<T>;

export type ApiProviderBase<TApiProps> = Class<React.Component<void, TApiProps & { children?: any }, void>>

declare export function createApiProvider<TProps: {}>(propsToContextNames: string[]): ApiProviderBase<TProps>;
